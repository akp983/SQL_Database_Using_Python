import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import mysql.connector
import numpy as np

db = mysql.connector.connect(
    host="localhost",
    username="root",
    password="0807",
    database="ecommerce"
)

cur = db.cursor()

# 1. list all unique cities where customers are located
query = """ select distinct customer_city from customers """
cur.execute(query)
data = cur.fetchall()
# print(data)

# 2. Count the number of orders placed in 2017
query = """ select count(order_id) from orders where year(order_purchase_timestamp) = 2017"""
cur.execute(query)
data = cur.fetchall()
# print("Total orders placed in 2017 are", data [0][0])

# 3. Find the total sales per category
query = """ select products.product_category as category, 
round(sum(payments.payment_value),2) as sales 
from products 
join order_items on products.product_id = order_items.product_id
join payments on payments.order_id = order_items.order_id
group by category"""
cur.execute(query)
data = cur.fetchall()
# print(data)

# df = pd.DataFrame(data, columns = ["Category", "Sales"])
# print(df)

# 4. Calculate the percentage of orders that were paid in installments

query = """ select (sum(case when payment_installments > 1 then 1 else 0 end))/count(*)*100 from payments"""
cur.execute(query)
data = cur.fetchall()
# print(data)

# 5. Count the number of customers from each state

query = """ select customer_state, count(customer_id) from customers
group by customer_state"""
cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data, columns=["state", "customer_count"])
df = df.sort_values(by = "customer_count", ascending = False)

# plt.figure(figsize=(4,4))
# plt.bar(df["state"], df["customer_count"])
# plt.xticks(rotation = 90)
# plt.show()

# 6. calculate the number of orders per month in 2018
query = """select monthname (order_purchase_timestamp) as months, 
count(order_id) as OrderCount from orders 
where year(order_purchase_timestamp) = 2017
group by months
"""
cur.execute(query)
data = cur.fetchall()
# print(data)
df = pd.DataFrame(data, columns=["Months", "OrderCount"])
# print(df)

o = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
ax = sns.barplot(x=df["Months"], y=df["OrderCount"], data = df, order=o, hue = df["Months"], palette="viridis")
plt.xticks(rotation = 45)
plt.xlabel("Months")
plt.ylabel("Sales Orders")
plt.title("Sales orders by months in year")
ax.bar_label(ax.containers[0])
# plt.show()

# 7. Find the average number of products per order, grouped by customer city

query = """ with totalOrder as 
(select orders.order_id, orders.customer_id, count(order_items.order_id) as oc 
from orders join order_items 
on orders.order_id = order_items.order_id
group by orders.order_id, orders.customer_id)

select customers.customer_city, round(avg(totalOrder.oc),2) as average_order 
from customers join totalOrder 
on customers.customer_id = totalOrder.customer_id
group by customers.customer_city
"""
cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data, columns=["City Names", "Average Orders"])
# print(df)

# 8. Calculate the percentage of total revenue contributed by each product category

query = """ 
select upper(products.product_category) as category, 
round(((sum(payments.payment_value)/(select sum(payment_value) from payments))*100),2) as salesContribution 
from products 
join order_items on products.product_id = order_items.product_id
join payments on payments.order_id = order_items.order_id
group by category order by salesContribution desc
"""
cur.execute(query)
data = cur.fetchall()
# print(data)

# 9. Identify the correlation between product price and the number of times a product has been purchased.

query = """select products.product_category, count(order_items.product_id), round(avg(order_items.price),2) 
from products join order_items 
on products.product_id = order_items.product_id
group by products.product_category"""
cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data, columns= ["Category", "Order_Count", "Price"])
arr1 = df["Order_Count"]
arr2 = df["Price"]
Correlation = np.corrcoef([arr1, arr2])
# print(Correlation)

# 10. Calculate the total revenue generated by each seller, and rank them by revenue.

query = """ select *, dense_rank() over(order by revenue desc) as sales_ranking from
(select order_items.seller_id, sum(payments.payment_value) as revenue
from order_items join payments 
on order_items.order_id = payments.order_id
group by order_items.seller_id) as subquery"""
cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data, columns= ["SellerID", "Payment_Value", "Ranking"])
# print(df.head())
df = df.head()
sns.barplot(x= "SellerID", y= "Payment_Value", data= df)
# plt.show()

# 11. Calculate the moving average of order values for each customer over their order history.

query = """ select customer_id, order_purchase_timestamp, payment, avg(payment) 
over(partition by customer_id order by order_purchase_timestamp
rows between 2 preceding and current row) as moving_average
from 
(select orders.customer_id, orders.order_purchase_timestamp, payments.payment_value as payment
from payments join orders
on payments.order_id = orders.order_id) as subquery
"""
cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data)
# df = df.head()
# print(df.head(30))

# 12. Calculate the moving average of order values for each customer over their order history.
query = """select years, months, PaymentValue, sum(PaymentValue) over(order by years, months) cumulative_sales from 
(select year(orders.order_purchase_timestamp) as years, 
month(orders.order_purchase_timestamp) as months, 
round(sum(payments.payment_value),2) as PaymentValue
from orders join payments
on orders.order_id = payments.order_id
group by years, months
order by years, months) as subquery
"""
cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data)
# print(df)

# 13. Calculate the year-over-year growth rate of total sales.
query = """with subquery as (select year(orders.order_purchase_timestamp) as years, 
round(sum(payments.payment_value),2) as PaymentValue
from orders join payments
on orders.order_id = payments.order_id
group by years order by years)
select years, PaymentValue, round(((PaymentValue/lag(PaymentValue, 1) over(order by years))-1)*100,2) from subquery
"""
cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data, columns=["Years", "Total_Sales", "Prev Years Sales"])
print(df)

# 14. Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.
